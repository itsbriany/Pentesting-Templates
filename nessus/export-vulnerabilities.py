import argparse
import io
import os
import requests
import time
import pandas as pd
from pathlib import Path


def make_processed_data_frame(df, plugin_ids):
    if len(plugin_ids) == 0:
        return df
    filtered_dfs = [df[df['Plugin ID'] == plugin_id] for plugin_id in plugin_ids]
    return pd.concat(filtered_dfs)

def run(args):
    if not os.environ['NESSUS_API_ACCESS_KEY']:
        print('[X] Please set the NESSUS_API_ACCESS_KEY environment variable.')
        exit(1)

    if not os.environ['NESSUS_API_SECRET_KEY']:
        print('[X] Please set the NESSUS_API_SECRET_KEY environment variable.')
        exit(1)

    requests.packages.urllib3.disable_warnings()
    headers = {
        'accept': 'application/json',
        'content-type': 'application/json',
        'x-apikeys': f"accessKey={os.environ['NESSUS_API_ACCESS_KEY']};secretKey={os.environ['NESSUS_API_SECRET_KEY']}"
    }

    data = {
        'format': 'csv'
    }

    response = requests.request('POST', f'{args.nessus_url}/scans/{args.scan_id}/export', headers=headers, json=data, verify=not args.no_check_ssl).json()
    download_file = response['file']

    result = False
    while result is False:
        response = requests.request('GET', f'{args.nessus_url}/scans/{args.scan_id}/export/{download_file}/download', headers=headers, verify=not args.no_check_ssl)
        if response.headers['Content-Type'] == 'application/json':
            print('[-] Waiting for Nessus to be ready...')
            time.sleep(1)
        else:
            print('[+] Processing data, this may take a while...')
            df = pd.read_csv(io.StringIO(response.text))
            filtered_df = make_processed_data_frame(df, args.plugin_ids)
            filtered_df.to_csv(args.output_file)
            print(f'[+] Report written to {args.output_file}!')
            result = True

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Nessus Cherry-picker.\nPick the most relevant vulnerabilities for your reports! You will need to set the NESSUS_API_ACCESS_KEY and the NESSUS_API_SECRET_KEY environment variables to interact with your Nessus instance.')
    parser.add_argument('--nessus-url', dest='nessus_url', type=str, help='The url where your Nessus instance lives.', required=True)
    parser.add_argument('--no-check-ssl', dest='no_check_ssl', help='Disable ssl verification? Default is false.', action='store_true', required=False)
    parser.add_argument('--plugin-ids', dest='plugin_ids', type=int, nargs='+', help='The list of plugin IDs you wish to select for your report.', required=False)
    parser.add_argument('--scan-id', dest='scan_id', type=int, help='The Nessus scan identifier. You should find it in the URL when you browse your scans.', required=True)
    parser.add_argument('--output-file', dest='output_file', type=str, help='The output file with the report.', required=True)

    try:
        args = parser.parse_args()
        run(args)
    except argparse.ArgumentError as e:
        print("[!] {}".format(e))
        parser.print_usage()
        sys.exit(1)
